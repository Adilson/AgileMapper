ToNew
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

var source = data.Source;
ICollection<Person> persons;

if (data.Target != null)
{
    // If data.Target is an array or IEnumerable<Person>:
    persons = new List<Person>(data.Target);

    // Else
    persons = data.Target;
}
else
{
    persons = new List<Person>();
}

var i = 0;

// If source is IList<Person> or array:
while (true)
{
    if (i == source.Count / source.Length)
    {
        break;
    }

    persons.Add(data.Map(source[i], null, i++));
}

// Else:
var sourceEnumerator = source.GetEnumerator();

while (true)
{
    if (!sourceEnumerator.MoveNext())
    {
        break;
    }

    persons.Add(data.Map(sourceEnumerator.Current, null, i++));
}

return persons.ToArray();

// Else if data.Target is a Collection:
return data.Target ?? new Collection<Person>(persons);

// Else:
return persons;

OnTo
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

- Non-identifiable:

  - Same type:

source = data.Source.Exclude(data.Target).ToArray();

  - Different type, non-complex:

source = data.Source.Select(s => s.ToString()).Exclude(data.Target).ToArray();

  - Different type, complex:

source = data.Source;

- Identifiable

 - Same type:

var collectionData = CollectionData.Create(data.Source, data.Target, x => x.Id);

 - Different type:

var collectionData = CollectionData.Create(data.Source, data.Target, s => s.Id, t => t.Id);

// Map intersection:
collectionData.Intersection.ForEach(data.Map);

source = collectionData.NewItems;
// As ToNew

Over
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

- Non-identifiable:

- Identifiable:

 - Same type:

var collectionData = CollectionData.Create(data.Source, data.Target, x => x.Id);

 - Different type:

var collectionData = CollectionData.Create(data.Source, data.Target, s => s.Id, t => t.Id);

// Map intersection:
collectionData.Intersection.ForEach(data.Map);

source = collectionData.NewItems;
// As ToNew